from collections import deque

def water_jug_bfs(x, y, target):
    visited = set()
    queue = deque([(0, 0)])  # (jug1, jug2)

    while queue:
        a, b = queue.popleft()

        if (a, b) in visited:
            continue
        visited.add((a, b))

        print(f"Jug1: {a} | Jug2: {b}")

        # Check if we reached the target
        if a == target or b == target:
            print("\nReached the target!")
            return True

        # Possible states
        states = set()

        # Fill Jug1
        states.add((x, b))
        # Fill Jug2
        states.add((a, y))
        # Empty Jug1
        states.add((0, b))
        # Empty Jug2
        states.add((a, 0))
        # Pour Jug1 -> Jug2
        pour = min(a, y - b)
        states.add((a - pour, b + pour))
        # Pour Jug2 -> Jug1
        pour = min(b, x - a)
        states.add((a + pour, b - pour))

        for state in states:
            if state not in visited:
                queue.append(state)

    print("No solution possible.")
    return False

# Example run
X = 4  # Capacity of Jug1
Y = 3  # Capacity of Jug2
Target = 2

Name=input("Enter Student Name:")
RegNo=int(input("Enter Reg No:"))
water_jug_bfs(X, Y, Target)
